#LSB Oracle attack
# init the bounds
from pwn import *
from Crypto.Util.number import long_to_bytes
import decimal




server = connect("130.192.5.212", "6647")
n = int(server.recvline())
ciphertext = int(server.recvline())

def to_bytes(m,l=n.bit_length()):
    return int.to_bytes(m, l, byteorder='big')

def to_int(b):
    return int.from_bytes(b,byteorder='big')

def print_bounds(low, up):
    print("[" + str(low) + "," + str(up) + "]")

print(n)
print(ciphertext)

decimal.getcontext().prec = n.bit_length()
lower_bound = decimal.Decimal(0)
upper_bound = decimal.Decimal(n)
print_bounds(lower_bound,upper_bound)
e = 65537
# loop
m = ciphertext
for i in range(n.bit_length()):
    m = (pow(2, e, n) * m) % n

    # interact with the server
    # print(f"sending {b'e '+str(m).encode()}")
    server.send(str(m).encode()+b'\n')

    bit = long_to_bytes(int(server.recvline().strip()))
    print(f"response = {bit}")

    # update bounds based on the leaked LSB
    if  bit[0] == 1:
        lower_bound = (upper_bound + lower_bound) / 2
    else:
        upper_bound = (upper_bound + lower_bound) / 2
    print_bounds(lower_bound, upper_bound)


#print decoded message
print(to_bytes(int(upper_bound),n.bit_length()).decode())