#common modulus
from gmpy2 import iroot
from pwn import *
import numpy as np
from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse
import decimal
import sys

#constants
e = 65537

def transform(k,n):
    return (k*pow(2,e))%n

def inverse_transform(k):
    return k//2

notdone = True

while (notdone):
    #connect to the server and collect n and encrypted_message
    server = connect("130.192.5.212", 6645)
    n = int(server.recvline())
    print(f"n = {n}")

    e_m = int(server.recvline())
    #print(f"e_m = {e_m}")

    #tranform the chipertext to bypass check
    transformed_e_m = transform(e_m,n)
    #print(transformed_e_m.bit_length()+1)
    #sys.set_int_max_str_digits(transformed_e_m.bit_length()+1)

    #asking to decrypt transformed chipertext and collecting transformed plaintext

    server.sendline(b'd'+str(transformed_e_m).encode())
    transformed_dec = int(server.recvline())
    print(f"dec = {transformed_dec}")
    print(transformed_dec*2)

    #inverting the transformation

    dec = inverse_transform(transformed_dec)
    
    try:
        print(dec.to_bytes(dec.bit_length() // 8 +1 , 'big').decode())
        notdone = False
    except Exception as error:
        print("An exception occurred:", error)
        server.close()
        pass










# try:
#     print((dec).to_bytes((dec).bit_length()//8 + 1, byteorder='big').decode())
# except Exception as error: 
#     print("An exception occurred:", error)
#     pass



















# flag= ' '
# while flag[0] != 'C':
#     server = connect("130.192.5.212", 6645)
#     n1 = int(server.recvline().strip())
#     c = int(server.recvline().strip())
#     e = 65537

#     server.send(b'e'+b'123\n')

#     n2 = int(server.recvline().strip())

#     p = gcd(n1,n2)
#     print("-----------")
#     print(f"p1 = {p}")
#     p2 = n1 // p
#     print(f"p2 = {p2}")
#     p3 = n2 // p
#     print(f"p3 = {p3}")
#     print("trying to decript...")
#     phi=(p-1)*(p2-1)

#     if phi != 0:
#         d = pow(e,-1,phi)

#         try:
#             flag = long_to_bytes(pow(i,d,n1))
#             print(flag.decode())
#         except: 
#             print("something went wrong...")
#             server.close()
#             pass

# server.send()


# def egcd(a, b):
#     if a == 0:
#         return (b, 0, 1)
#     else:
#         g, y, x = egcd(b % a, a)
#         return (g, x - (b // a) * y, y)


# if __name__ == '__main__':

#     e1 = 65537
#     e2 = 65537

#     server = connect("130.192.5.212", 6645)
#     n = int(server.recvline().strip())
#     print(f"n = {n}")

#     c1 = int(server.recvline().strip())
#     print(f"c1 = {c1}")

#     server.send(b'e'+b'123\n')

#     c2 = int(server.recvline().strip())
#     print(f"c2 = {c2}")

#     res = egcd(e1,e2)
#     u = res[1]
#     v = res[2]

#     val = u*e1 + v * e2
#     print(val)

#     decrypted = pow(c1,u,n) * pow(c2,v,n) % n
#     print(decrypted)
#     print(decrypted.to_bytes(decrypted.bit_length()//8 + 1, byteorder='big').decode())

