from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Util.number import long_to_bytes, bytes_to_long

HOST = "130.192.5.212"
PORT = 6552
DELTA_PORT = 6552

import os
os.environ['PWNLIB_NOTERM'] = 'True'  # Configuration patch to allow pwntools to be run inside of an IDE
os.environ['PWNLIB_SILENT'] = 'True'

from pwn import *

def sanitize_field(field: str):
    return field \
        .replace("/", "_") \
        .replace("&", "") \
        .replace(":", "") \
        .replace(";", "") \
        .replace("<", "") \
        .replace(">", "") \
        .replace('"', "") \
        .replace("'", "") \
        .replace("(", "") \
        .replace(")", "") \
        .replace("[", "") \
        .replace("]", "") \
        .replace("{", "") \
        .replace("}", "") \
        .replace("=", "")

if __name__ == '__main__':

    server_gencookies = remote(HOST,PORT) #connect to the server

    #sending the string to isolate "true" in a single block: "username=AAAAAAA AAAAAAAAA&admin= false" ("username={username}&admin=false")
    server_gencookies.recv(1024) #to get Username prompt
    padded_admin = b"AAAAAAA"+pad(b"true",AES.block_size)+b"AAAAAAAAA\n"
    server_gencookies.send(padded_admin)
    sleep(1)
    encrpyted_cookie = server_gencookies.recv(1024).split(b'\n')[0]
    print(encrpyted_cookie)
    cookie_info = long_to_bytes(int(encrpyted_cookie))
    forged_cookie = cookie_info[0:16]+cookie_info[32:48]+cookie_info[16:32]

    # print(f"username=AAAAAAA AAAAAAAAA&admin= : {cookie_info[0:32]}")

    # ##forging the block with "admin=true"+garbage ("username=AAAAAAA true+padding &admin=false(+padding)")
    # server_gencookies = remote(HOST, PORT)
    # server_gencookies.recv(1024) #recv "Username"
    # server_gencookies.send(b"A"*7+pad(b"true",AES.block_size)+b'\n')
    # sleep(1)
    # encrpyted_cookie_2 = server_gencookies.recv(1024).split(b'\n')[0]
    # cookie_info2 = long_to_bytes(int(encrpyted_cookie_2))
    # print(f"true+padding : {cookie_info2[16:32]}")
    # server_gencookies.close()

    ##submitting the forged cookie: "username=&admin=true"+paddingblock
    # auth_cookie = cookie_info[0:32] + cookie_info2[16:32]
    print(forged_cookie)
    server_gencookies.send(b'flag\n')
    print(server_gencookies.recv(1024)) ##recv "Cookie:"
    # inter = bytes_to_long(auth_cookie)
    # string = f"{inter}"
    # print(string.encode())
    sleep(1)
    print(f"{bytes_to_long(forged_cookie)}".encode())
    server_gencookies.send(f"{bytes_to_long(forged_cookie)}".encode())
    server_gencookies.send(b'\n')
    answer = server_gencookies.recv(1024)

    print(answer.decode())

