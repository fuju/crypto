from string import printable
from Crypto.Util.strxor import strxor

CHARACTER_FREQ = {
    'a': 0.0651738, 'b': 0.0124248, 'c': 0.0217339, 'd': 0.0349835, 'e': 0.1041442, 'f': 0.0197881, 'g': 0.0158610,
    'h': 0.0492888, 'i': 0.0558094, 'j': 0.0009033, 'k': 0.0050529, 'l': 0.0331490, 'm': 0.0202124, 'n': 0.0564513,
    'o': 0.0596302, 'p': 0.0137645, 'q': 0.0008606, 'r': 0.0497563, 's': 0.0515760, 't': 0.0729357, 'u': 0.0225134,
    'v': 0.0082903, 'w': 0.0171272, 'x': 0.0013692, 'y': 0.0145984, 'z': 0.0007836, ' ': 0.1918182
}

file = open("hacker-manifesto.enc", "r")
ciphertexts = []
max_len=0
for line in file:
    ciphertexts.append(bytes.fromhex(line.strip()))
for line in ciphertexts:
    if len(line) > max_len:
        max_len = len(line)

canditates_list = []
for byte_num in range(max_len):
    freqs = [0.0]*256

    for guessed_byte in range(256):
        for c in ciphertexts:
            if byte_num >= len(c):
                continue
            if chr(c[byte_num] ^ guessed_byte) in printable:
                freqs[guessed_byte] += CHARACTER_FREQ.get(chr(c[byte_num] ^ guessed_byte).lower(), 0)
            
    match_list = [(freqs[i], i) for i in range(256)]
    ordered_match_list = sorted(match_list, reverse=True)
    canditates_list.append(ordered_match_list)

#print(canditates_list)
keystream = bytearray()
for x in canditates_list:
    keystream.append(x[0][1])

keystream[0] = keystream[0] ^ ord('r') ^ ord('c')
keystream[1] = keystream[1] ^ ord('7') ^ ord('r')
keystream[2] = keystream[2] ^ ord('%') ^ ord('i')
keystream[3] = keystream[3] ^ ord('$') ^ ord('m')
keystream[5] = keystream[5] ^ ord('\'') ^ ord('n')
keystream[28] = keystream[28] ^ ord('s') ^ ord('o')
keystream[20] = keystream[20] ^ ord('3') ^ ord('w')
keystream[17] = keystream[17] ^ ord(' ') ^ ord('o')
keystream[38] = keystream[38] ^ ord(' ') ^ ord('e')
keystream[40] = keystream[40] ^ ord('w') ^ ord('a')
keystream[42] = keystream[42] ^ ord('c') ^ ord('s')
keystream[43] = keystream[43] ^ ord('h') ^ ord('e')
keystream[45] = keystream[45] ^ ord('\'') ^ ord('u')
keystream[46] = keystream[46] ^ ord(' ') ^ ord('t')
keystream[49] = keystream[49] ^ ord('#') ^ ord('b')
keystream[53] = keystream[53] ^ ord('O') ^ ord('d')
keystream[58] = keystream[58] ^ ord('4') ^ ord('m')
keystream[59] = keystream[59] ^ ord(' ') ^ ord('i')
keystream[65] = keystream[65] ^ ord('H') ^ ord('o')
keystream[67] = keystream[67] ^ ord('1') ^ ord('t')
keystream[69] = keystream[69] ^ ord('Y') ^ ord('s')

for c in ciphertexts:
    l = min(len(c), len(keystream))
    print(strxor(keystream[:l], c[:l]))